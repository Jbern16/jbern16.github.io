Elm.Jbern16 = Elm.Jbern16 || {};
Elm.Jbern16.make = function (_elm) {
   "use strict";
   _elm.Jbern16 = _elm.Jbern16 || {};
   if (_elm.Jbern16.values) return _elm.Jbern16.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var getLink = F2(function (content,index) {    return A2($Maybe.withDefault,"",A2($Array.get,index,content));});
   var sepStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "28px"}]));
   var findSep = function (headline) {
      return _U.eq(headline,"Contact Me:") ? A2($Html.span,_U.list([sepStyle]),_U.list([$Html.text(" ° ")])) : _U.eq(headline,"My Work:") ? A2($Html.span,
      _U.list([sepStyle]),
      _U.list([$Html.text(" ° ° ")])) : A2($Html.span,_U.list([sepStyle]),_U.list([$Html.text(" ° ° ° ")]));
   };
   var iconStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "padding",_1: "10px"},{ctor: "_Tuple2",_0: "color",_1: "black"}]));
   var findContent = function (model) {
      if (_U.eq(model.headline,"Contact Me:")) {
            var links = $Array.fromList(A2($String.split,",",model.content));
            var email = A2(getLink,links,0);
            var twitter = A2(getLink,links,1);
            var linkedIn = A2(getLink,links,3);
            return A2($Html.div,
            _U.list([]),
            _U.list([A2($Html.a,
                    _U.list([iconStyle,$Html$Attributes.href(email)]),
                    _U.list([A2($Html.i,_U.list([$Html$Attributes.$class("fa fa-envelope fa-3x")]),_U.list([]))]))
                    ,A2($Html.a,
                    _U.list([iconStyle,$Html$Attributes.href(twitter)]),
                    _U.list([A2($Html.i,_U.list([$Html$Attributes.$class("fa fa-twitter fa-3x")]),_U.list([]))]))
                    ,A2($Html.a,
                    _U.list([iconStyle,$Html$Attributes.href(linkedIn)]),
                    _U.list([A2($Html.i,_U.list([$Html$Attributes.$class("fa fa-linkedin fa-3x")]),_U.list([]))]))]));
         } else if (_U.eq(model.headline,"My Work:")) {
               var links = $Array.fromList(A2($String.split,",",model.content));
               var github = A2(getLink,links,0);
               var medium = A2(getLink,links,2);
               return A2($Html.div,
               _U.list([]),
               _U.list([A2($Html.a,
                       _U.list([iconStyle,$Html$Attributes.href(github)]),
                       _U.list([A2($Html.i,_U.list([$Html$Attributes.$class("fa fa-github fa-3x")]),_U.list([]))]))
                       ,A2($Html.a,
                       _U.list([iconStyle,$Html$Attributes.href(medium)]),
                       _U.list([A2($Html.i,_U.list([$Html$Attributes.$class("fa fa-medium fa-3x")]),_U.list([]))]))]));
            } else return A2($Html.div,
            _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "24px"}]))]),
            _U.list([$Html.text(model.content)]));
   };
   var textContainer = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "paddingTop",_1: "20%"}
                                                      ,{ctor: "_Tuple2",_0: "paddingBottom",_1: "20%"}
                                                      ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}
                                                      ,{ctor: "_Tuple2",_0: "font-family",_1: "Montserrat, sans-serif"}]));
   var backgroundStyle = function (hex) {
      return $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "backgroundColor",_1: hex},{ctor: "_Tuple2",_0: "height",_1: "100vh"}]));
   };
   var NextClick = {ctor: "NextClick"};
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([backgroundStyle(model.backgroundColor)]),
      _U.list([A2($Html.div,
      _U.list([A2($Html$Events.onClick,address,NextClick)]),
      _U.list([A2($Html.div,
      _U.list([textContainer]),
      _U.list([A2($Html.div,_U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "42px"}]))]),_U.list([$Html.text(model.headline)]))
              ,findSep(model.headline)
              ,findContent(model)]))]))]));
   });
   var NoOp = {ctor: "NoOp"};
   var changeID = function (model) {    return _U.eq(model.nextID,2) ? 0 : model.nextID + 1;};
   var backgroundColors = $Array.fromList(_U.list(["#007EA7","#5E8C61","#99D5C9"]));
   var contents = $Array.fromList(_U.list(["Web Developer"
                                          ,"https://github.com/jbern16"
                                          ,"mailto:jbern16@gmail.com, https://twitter.com/jbern16, https://medium.com/@jBern16, https://www.linkedin.com/in/jonathanbernesser"]));
   var headlines = $Array.fromList(_U.list(["Jonathan Bernesser","My Work:","Contact Me:"]));
   var update = F2(function (action,model) {
      var _p0 = action;
      if (_p0.ctor === "NoOp") {
            return model;
         } else {
            var backgroundColor = A2($Maybe.withDefault,"",A2($Array.get,model.nextID,backgroundColors));
            var content = A2($Maybe.withDefault,"",A2($Array.get,model.nextID,contents));
            var headline = A2($Maybe.withDefault,"",A2($Array.get,model.nextID,headlines));
            return _U.update(model,{headline: headline,content: content,backgroundColor: backgroundColor,nextID: changeID(model)});
         }
   });
   var init = {headline: "Jonathan Bernesser",content: "Web Developer",backgroundColor: "#007EA7",nextID: 1};
   var main = $StartApp$Simple.start({model: init,update: update,view: view});
   var Model = F4(function (a,b,c,d) {    return {headline: a,content: b,backgroundColor: c,nextID: d};});
   return _elm.Jbern16.values = {_op: _op
                                ,Model: Model
                                ,init: init
                                ,headlines: headlines
                                ,contents: contents
                                ,backgroundColors: backgroundColors
                                ,changeID: changeID
                                ,NoOp: NoOp
                                ,NextClick: NextClick
                                ,update: update
                                ,backgroundStyle: backgroundStyle
                                ,textContainer: textContainer
                                ,iconStyle: iconStyle
                                ,sepStyle: sepStyle
                                ,getLink: getLink
                                ,findContent: findContent
                                ,findSep: findSep
                                ,view: view
                                ,main: main};
};
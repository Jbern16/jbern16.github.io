Elm.Css = Elm.Css || {};
Elm.Css.Cursor = Elm.Css.Cursor || {};
Elm.Css.Cursor.make = function (_elm) {
   "use strict";
   _elm.Css = _elm.Css || {};
   _elm.Css.Cursor = _elm.Css.Cursor || {};
   if (_elm.Css.Cursor.values) return _elm.Css.Cursor.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Css = Elm.Css.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Vendor = Elm.Vendor.make(_elm);
   var _op = {};
   var string = function (cursor) {
      var _p0 = cursor;
      switch (_p0.ctor)
      {case "Alias": return "alias";
         case "AllScroll": return "all-scroll";
         case "Auto": return "auto";
         case "Cell": return "cell";
         case "ContextMenu": return "context-menu";
         case "ColResize": return "col-resize";
         case "Copy": return "copy";
         case "Crosshair": return "crosshair";
         case "Default": return "default";
         case "EResize": return "e-resize";
         case "EwResize": return "ew-resize";
         case "Grab": return "grab";
         case "Grabbing": return "grabbign";
         case "Help": return "help";
         case "Move": return "move";
         case "NResize": return "n-resize";
         case "NeResize": return "ne-resize";
         case "NeswResize": return "nesw-resize";
         case "NsResize": return "ns-resize";
         case "NwResize": return "nw-resize";
         case "NwseResize": return "nwse-resize";
         case "NoDrop": return "no-drop";
         case "None": return "none";
         case "NotAllowed": return "not-allowed";
         case "Pointer": return "pointer";
         case "Progress": return "progress";
         case "RowResize": return "row-resize";
         case "SResize": return "s-resize";
         case "SeResize": return "se-resize";
         case "SwResize": return "sw-resize";
         case "Text": return "text";
         case "Url": return $Css.url(_p0._0);
         case "VerticalText": return "vertical-text";
         case "WResize": return "w-resize";
         case "Wait": return "wait";
         case "ZoomIn": return "zoom-in";
         default: return "zoom-out";}
   };
   var cursor = F2(function (c,styles) {
      var name = "cursor";
      var prefix = $Vendor.prefix;
      var _p1 = c;
      switch (_p1.ctor)
      {case "Grab": return _U.eq(prefix,$Vendor.Webkit) ? A3($Css.style,name,A2($Basics._op["++"],"-webkit-",string(c)),styles) : A3($Css.style,
           name,
           string(c),
           styles);
         case "ZoomIn": return _U.eq(prefix,$Vendor.Webkit) ? A3($Css.style,name,A2($Basics._op["++"],"-webkit-",string(c)),styles) : A3($Css.style,
           name,
           string(c),
           styles);
         case "ZoomOut": return _U.eq(prefix,$Vendor.Webkit) ? A3($Css.style,name,A2($Basics._op["++"],"-webkit-",string(c)),styles) : A3($Css.style,
           name,
           string(c),
           styles);
         default: return A3($Css.style,"cursor",string(c),styles);}
   });
   var ZoomOut = {ctor: "ZoomOut"};
   var ZoomIn = {ctor: "ZoomIn"};
   var Wait = {ctor: "Wait"};
   var WResize = {ctor: "WResize"};
   var VerticalText = {ctor: "VerticalText"};
   var Url = function (a) {    return {ctor: "Url",_0: a};};
   var Text = {ctor: "Text"};
   var SwResize = {ctor: "SwResize"};
   var SeResize = {ctor: "SeResize"};
   var SResize = {ctor: "SResize"};
   var RowResize = {ctor: "RowResize"};
   var Progress = {ctor: "Progress"};
   var Pointer = {ctor: "Pointer"};
   var NotAllowed = {ctor: "NotAllowed"};
   var None = {ctor: "None"};
   var NoDrop = {ctor: "NoDrop"};
   var NwseResize = {ctor: "NwseResize"};
   var NwResize = {ctor: "NwResize"};
   var NsResize = {ctor: "NsResize"};
   var NeswResize = {ctor: "NeswResize"};
   var NeResize = {ctor: "NeResize"};
   var NResize = {ctor: "NResize"};
   var Move = {ctor: "Move"};
   var Help = {ctor: "Help"};
   var Grabbing = {ctor: "Grabbing"};
   var Grab = {ctor: "Grab"};
   var EwResize = {ctor: "EwResize"};
   var EResize = {ctor: "EResize"};
   var Default = {ctor: "Default"};
   var Crosshair = {ctor: "Crosshair"};
   var Copy = {ctor: "Copy"};
   var ColResize = {ctor: "ColResize"};
   var ContextMenu = {ctor: "ContextMenu"};
   var Cell = {ctor: "Cell"};
   var Auto = {ctor: "Auto"};
   var AllScroll = {ctor: "AllScroll"};
   var Alias = {ctor: "Alias"};
   return _elm.Css.Cursor.values = {_op: _op
                                   ,Alias: Alias
                                   ,AllScroll: AllScroll
                                   ,Auto: Auto
                                   ,Cell: Cell
                                   ,ContextMenu: ContextMenu
                                   ,ColResize: ColResize
                                   ,Copy: Copy
                                   ,Crosshair: Crosshair
                                   ,Default: Default
                                   ,EResize: EResize
                                   ,EwResize: EwResize
                                   ,Grab: Grab
                                   ,Grabbing: Grabbing
                                   ,Help: Help
                                   ,Move: Move
                                   ,NResize: NResize
                                   ,NeResize: NeResize
                                   ,NeswResize: NeswResize
                                   ,NsResize: NsResize
                                   ,NwResize: NwResize
                                   ,NwseResize: NwseResize
                                   ,NoDrop: NoDrop
                                   ,None: None
                                   ,NotAllowed: NotAllowed
                                   ,Pointer: Pointer
                                   ,Progress: Progress
                                   ,RowResize: RowResize
                                   ,SResize: SResize
                                   ,SeResize: SeResize
                                   ,SwResize: SwResize
                                   ,Text: Text
                                   ,Url: Url
                                   ,VerticalText: VerticalText
                                   ,WResize: WResize
                                   ,Wait: Wait
                                   ,ZoomIn: ZoomIn
                                   ,ZoomOut: ZoomOut
                                   ,string: string
                                   ,cursor: cursor};
};
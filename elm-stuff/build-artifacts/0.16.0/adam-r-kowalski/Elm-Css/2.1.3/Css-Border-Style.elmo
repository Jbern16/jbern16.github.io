Elm.Css = Elm.Css || {};
Elm.Css.Border = Elm.Css.Border || {};
Elm.Css.Border.Style = Elm.Css.Border.Style || {};
Elm.Css.Border.Style.make = function (_elm) {
   "use strict";
   _elm.Css = _elm.Css || {};
   _elm.Css.Border = _elm.Css.Border || {};
   _elm.Css.Border.Style = _elm.Css.Border.Style || {};
   if (_elm.Css.Border.Style.values) return _elm.Css.Border.Style.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var string = function (style) {
      var _p0 = style;
      switch (_p0.ctor)
      {case "None": return "none";
         case "Hidden": return "hidden";
         case "Dotted": return "dotted";
         case "Dashed": return "dashed";
         case "Solid": return "solid";
         case "Double": return "double";
         case "Groove": return "groove";
         case "Ridge": return "ridge";
         case "Inset": return "inset";
         default: return "outset";}
   };
   var Outset = {ctor: "Outset"};
   var Inset = {ctor: "Inset"};
   var Ridge = {ctor: "Ridge"};
   var Groove = {ctor: "Groove"};
   var Double = {ctor: "Double"};
   var Solid = {ctor: "Solid"};
   var Dashed = {ctor: "Dashed"};
   var Dotted = {ctor: "Dotted"};
   var Hidden = {ctor: "Hidden"};
   var None = {ctor: "None"};
   return _elm.Css.Border.Style.values = {_op: _op
                                         ,None: None
                                         ,Hidden: Hidden
                                         ,Dotted: Dotted
                                         ,Dashed: Dashed
                                         ,Solid: Solid
                                         ,Double: Double
                                         ,Groove: Groove
                                         ,Ridge: Ridge
                                         ,Inset: Inset
                                         ,Outset: Outset
                                         ,string: string};
};
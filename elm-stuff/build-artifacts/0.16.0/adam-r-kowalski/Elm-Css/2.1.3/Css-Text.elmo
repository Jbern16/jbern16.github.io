Elm.Css = Elm.Css || {};
Elm.Css.Text = Elm.Css.Text || {};
Elm.Css.Text.make = function (_elm) {
   "use strict";
   _elm.Css = _elm.Css || {};
   _elm.Css.Text = _elm.Css.Text || {};
   if (_elm.Css.Text.values) return _elm.Css.Text.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Css = Elm.Css.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var wordSpacing = F2(function (length,styles) {    return A3($Css.style,"word-spacing",$Css.px(length),styles);});
   var indent = F2(function (length,styles) {    return A3($Css.style,"text-indent",$Css.px(length),styles);});
   var lineHeight = F2(function (length,styles) {    return A3($Css.style,"line-height",$Css.px(length),styles);});
   var letterSpacing = F2(function (length,styles) {    return A3($Css.style,"letter-spacing",$Css.px(length),styles);});
   var color = F2(function (c,styles) {    return A3($Css.style,"color",$Css.colorString(c),styles);});
   var whiteSpaceString = function (whiteSpace) {
      var _p0 = whiteSpace;
      switch (_p0.ctor)
      {case "NormalWhiteSpace": return "normal";
         case "NoWrap": return "nowrap";
         case "Pre": return "pre";
         case "PreLine": return "pre-line";
         default: return "pre-wrap";}
   };
   var whiteSpace = F2(function (ws,styles) {    return A3($Css.style,"white-space",whiteSpaceString(ws),styles);});
   var unicodeBidiString = function (unicodeBidi) {
      var _p1 = unicodeBidi;
      switch (_p1.ctor)
      {case "NormalUnicodeBidi": return "normal";
         case "Embed": return "embed";
         default: return "bidi-override";}
   };
   var unicodeBidi = F2(function (u,styles) {    return A3($Css.style,"unicode-bidi",unicodeBidiString(u),styles);});
   var decorationString = function (decoration) {
      var _p2 = decoration;
      switch (_p2.ctor)
      {case "NoDecoration": return "none";
         case "Underline": return "underline";
         case "Overline": return "overline";
         default: return "line-through";}
   };
   var decoration = F2(function (d,styles) {    return A3($Css.style,"text-decoration",decorationString(d),styles);});
   var alignString = function (align) {
      var _p3 = align;
      switch (_p3.ctor)
      {case "Left": return "left";
         case "Right": return "right";
         case "Center": return "center";
         default: return "justify";}
   };
   var align = F2(function (a,styles) {    return A3($Css.style,"text-align",alignString(a),styles);});
   var directionString = function (direction) {    var _p4 = direction;if (_p4.ctor === "Ltr") {    return "ltr";} else {    return "Rtl";}};
   var direction = F2(function (d,styles) {    return A3($Css.style,"direction",directionString(d),styles);});
   var PreWrap = {ctor: "PreWrap"};
   var PreLine = {ctor: "PreLine"};
   var Pre = {ctor: "Pre"};
   var NoWrap = {ctor: "NoWrap"};
   var NormalWhiteSpace = {ctor: "NormalWhiteSpace"};
   var BidiOverride = {ctor: "BidiOverride"};
   var Embed = {ctor: "Embed"};
   var NormalUnicodeBidi = {ctor: "NormalUnicodeBidi"};
   var LineThrough = {ctor: "LineThrough"};
   var Overline = {ctor: "Overline"};
   var Underline = {ctor: "Underline"};
   var NoDecoration = {ctor: "NoDecoration"};
   var Justify = {ctor: "Justify"};
   var Center = {ctor: "Center"};
   var Right = {ctor: "Right"};
   var Left = {ctor: "Left"};
   var Rtl = {ctor: "Rtl"};
   var Ltr = {ctor: "Ltr"};
   return _elm.Css.Text.values = {_op: _op
                                 ,Ltr: Ltr
                                 ,Rtl: Rtl
                                 ,Left: Left
                                 ,Right: Right
                                 ,Center: Center
                                 ,Justify: Justify
                                 ,NoDecoration: NoDecoration
                                 ,Underline: Underline
                                 ,Overline: Overline
                                 ,LineThrough: LineThrough
                                 ,NormalUnicodeBidi: NormalUnicodeBidi
                                 ,Embed: Embed
                                 ,BidiOverride: BidiOverride
                                 ,NormalWhiteSpace: NormalWhiteSpace
                                 ,NoWrap: NoWrap
                                 ,Pre: Pre
                                 ,PreLine: PreLine
                                 ,PreWrap: PreWrap
                                 ,directionString: directionString
                                 ,alignString: alignString
                                 ,decorationString: decorationString
                                 ,unicodeBidiString: unicodeBidiString
                                 ,whiteSpaceString: whiteSpaceString
                                 ,color: color
                                 ,direction: direction
                                 ,letterSpacing: letterSpacing
                                 ,lineHeight: lineHeight
                                 ,align: align
                                 ,decoration: decoration
                                 ,indent: indent
                                 ,unicodeBidi: unicodeBidi
                                 ,whiteSpace: whiteSpace
                                 ,wordSpacing: wordSpacing};
};
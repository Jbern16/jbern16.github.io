Elm.Css = Elm.Css || {};
Elm.Css.Display = Elm.Css.Display || {};
Elm.Css.Display.make = function (_elm) {
   "use strict";
   _elm.Css = _elm.Css || {};
   _elm.Css.Display = _elm.Css.Display || {};
   if (_elm.Css.Display.values) return _elm.Css.Display.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Css = Elm.Css.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Vendor = Elm.Vendor.make(_elm);
   var _op = {};
   var string = function (display) {
      var _p0 = display;
      switch (_p0.ctor)
      {case "Inline": return "inline";
         case "Block": return "block";
         case "Flex": return "flex";
         case "InlineBlock": return "inline-block";
         case "InlineFlex": return "inline-flex";
         case "InlineTable": return "inline-table";
         case "ListItem": return "list-item";
         case "RunIn": return "run-in";
         case "Table": return "table";
         case "TableCaption": return "table-caption";
         case "TableColumnGroup": return "table-column-group";
         case "TableHeaderGroup": return "table-header-group";
         case "TableFooterGroup": return "table-footer-group";
         case "TableRowGroup": return "table-row-group";
         case "TableCell": return "table-cell";
         case "TableColumn": return "table-column";
         case "TableRow": return "table-row";
         default: return "none";}
   };
   var display = F2(function (d,styles) {
      var prefix = $Vendor.prefix;
      var _p1 = d;
      switch (_p1.ctor)
      {case "Flex": return _U.eq(prefix,$Vendor.Webkit) ? A3($Css.style,"display","-webkit-flex",styles) : _U.eq(prefix,$Vendor.MS) ? A3($Css.style,
           "display",
           "-ms-flexbox",
           styles) : A3($Css.style,"display","flex",styles);
         case "InlineFlex": return _U.eq(prefix,$Vendor.Webkit) ? A3($Css.style,"display","-webkit-inline-flex",styles) : _U.eq(prefix,
           $Vendor.MS) ? A3($Css.style,"display","-ms-infline-flexbox",styles) : A3($Css.style,"display","flex",styles);
         default: return A3($Css.style,"display",string(d),styles);}
   });
   var None = {ctor: "None"};
   var TableRow = {ctor: "TableRow"};
   var TableColumn = {ctor: "TableColumn"};
   var TableCell = {ctor: "TableCell"};
   var TableRowGroup = {ctor: "TableRowGroup"};
   var TableFooterGroup = {ctor: "TableFooterGroup"};
   var TableHeaderGroup = {ctor: "TableHeaderGroup"};
   var TableColumnGroup = {ctor: "TableColumnGroup"};
   var TableCaption = {ctor: "TableCaption"};
   var Table = {ctor: "Table"};
   var RunIn = {ctor: "RunIn"};
   var ListItem = {ctor: "ListItem"};
   var InlineTable = {ctor: "InlineTable"};
   var InlineFlex = {ctor: "InlineFlex"};
   var InlineBlock = {ctor: "InlineBlock"};
   var Flex = {ctor: "Flex"};
   var Block = {ctor: "Block"};
   var Inline = {ctor: "Inline"};
   return _elm.Css.Display.values = {_op: _op
                                    ,Inline: Inline
                                    ,Block: Block
                                    ,Flex: Flex
                                    ,InlineBlock: InlineBlock
                                    ,InlineFlex: InlineFlex
                                    ,InlineTable: InlineTable
                                    ,ListItem: ListItem
                                    ,RunIn: RunIn
                                    ,Table: Table
                                    ,TableCaption: TableCaption
                                    ,TableColumnGroup: TableColumnGroup
                                    ,TableHeaderGroup: TableHeaderGroup
                                    ,TableFooterGroup: TableFooterGroup
                                    ,TableRowGroup: TableRowGroup
                                    ,TableCell: TableCell
                                    ,TableColumn: TableColumn
                                    ,TableRow: TableRow
                                    ,None: None
                                    ,string: string
                                    ,display: display};
};
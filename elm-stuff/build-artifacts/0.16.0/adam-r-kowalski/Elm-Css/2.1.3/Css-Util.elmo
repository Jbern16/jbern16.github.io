Elm.Css = Elm.Css || {};
Elm.Css.Util = Elm.Css.Util || {};
Elm.Css.Util.make = function (_elm) {
   "use strict";
   _elm.Css = _elm.Css || {};
   _elm.Css.Util = _elm.Css.Util || {};
   if (_elm.Css.Util.values) return _elm.Css.Util.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Css = Elm.Css.make(_elm),
   $Css$Display = Elm.Css.Display.make(_elm),
   $Css$Flex = Elm.Css.Flex.make(_elm),
   $Css$Font = Elm.Css.Font.make(_elm),
   $Css$Margin = Elm.Css.Margin.make(_elm),
   $Css$Padding = Elm.Css.Padding.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var codeStyle = function (styles) {    return A5($Css$Margin.all,0,0,0,0,A5($Css$Padding.all,0,0,0,0,A2($Css$Font.size,18,styles)));};
   var getCode = function (_p0) {
      var _p1 = _p0;
      var _p2 = _p1._1;
      var pc = A2($String.right,1,_p2);
      var v = _U.eq(pc," ") ? A2($String.dropRight,1,_p2) : _p2;
      return A2($Html.pre,
      _U.list([$Html$Attributes.style(codeStyle(_U.list([])))]),
      _U.list([A2($Html.code,
      _U.list([$Html$Attributes.style(codeStyle(_U.list([])))]),
      _U.list([$Html.text(A2($Basics._op["++"],"  ",A2($Basics._op["++"],_p1._0,A2($Basics._op["++"],": ",A2($Basics._op["++"],v,";")))))]))]));
   };
   var columnStyle = function (styles) {    return A2($Css$Display.display,$Css$Display.Flex,A2($Css$Flex.direction,$Css$Flex.Column,styles));};
   var containerStyle = function (styles) {    return columnStyle(A5($Css$Margin.all,20,0,20,0,styles));};
   var toCss = F2(function (className,styles) {
      return A2($Html.div,
      _U.list([$Html$Attributes.style(containerStyle(_U.list([])))]),
      _U.list([A2($Html.code,
              _U.list([$Html$Attributes.style(codeStyle(_U.list([])))]),
              _U.list([$Html.text(A2($Basics._op["++"],".",A2($Basics._op["++"],className," {")))]))
              ,A2($Html.div,_U.list([$Html$Attributes.style(columnStyle(_U.list([])))]),A2($List.map,function (s) {    return getCode(s);},styles))
              ,A2($Html.code,_U.list([$Html$Attributes.style(codeStyle(_U.list([])))]),_U.list([$Html.text("}")]))]));
   });
   return _elm.Css.Util.values = {_op: _op,toCss: toCss};
};